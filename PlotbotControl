package de.tuhh.diss.plotbot;
import lejos.nxt.*;



/**
 * This Class is used for control of the plotting robot. A great amount of time should spend for controlling the robot.
 * Add a suitable constructor and add further methods you need for driving the motors, evaluating the sensors etc.
 * 
 * Hint: Create an instance of PlotBotControl inside the class Plotbot and  * pass the PlotBotControl when calling the
 * method plot of the selected shape.
 */
public class PlotbotControl implements SensorPortListener{
	 						
	private int LightBool;						//light threshold
	private LightSensor Light;
	private TouchSensor TouchSwivel;			//Touch sensor for the swivel arm
	private TouchSensor TouchPen;
	private int ORIGIN;
	private int ARMMAX;
	private int PENMAX;
	private int ZEROPOSITIONARM;

	public PlotbotControl(){
		LightBool = 500; //maybe
	}

	public void SwivelArm (double degree) throws Exception{
		int roundeddegree = (int) Math.round(degree);
		if (degree + Motor.A.getPosition() < ARMMAX)
		Motor.A.rotate(roundeddegree);			//Still need to account for the MAX position of arm
		else 
			throw new Exception("This movement will exceed the robots range of motion.");
	}
	
	public void SwivelPen (int degree) throws Exception{
		if (degree + Motor.B.getPosition() < PENMAX)
		Motor.B.rotate(degree);					//Still need to account for the MAX position of the pen
		else 
			throw new Exception("This movement will exceed the robots range of motion.");
	}
	
	public void Wheels (double degree) throws Exception{
		int roundeddegree = (int) Math.round(degree);
		if (degree + Motor.C.getPosition() > ORIGIN)
		Motor.C.rotateTo(roundeddegree);
		else 
			throw new Exception("This movement will exceed the robots origin position.");
	}
	
	public boolean Calibration(){
		boolean calibration = false;
		Light = new LightSensor(SensorPort.S3, false);
		TouchSwivel = new TouchSensor(SensorPort.S1);
		TouchPen = new TouchSensor(SensorPort.S2);
		
		Light.setFloodlight(true);
		while (Light.getLightValue() > LightBool){
			Motor.C.forward();
		}
		ORIGIN = Motor.C.getPosition();
		Light.setFloodlight(false);
		
		ZEROPOSITIONARM = Motor.A.getPosition(); 
		while (TouchSwivel.isPressed() != true){
			Motor.A.forward();
		}
		ARMMAX = Motor.A.getPosition();
		Motor.A.rotateTo(ZEROPOSITIONARM);
		
		while (TouchPen.isPressed() != true){
			Motor.B.backward();
		}
		PENMAX = Motor.B.getPosition();
		calibration = true;
		return calibration;
	}
	
	public int getORIGIN(){
		return ORIGIN;
	}
	
	public int getARMMAX(){
		return ARMMAX;
	}
	
	public int getPENMAX(){
		return PENMAX;
	}
	
	public int getZEROPOSITIONARM(){
		return ZEROPOSITIONARM;
	}

	//@Override
	public void stateChanged(SensorPort arg0, int arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	
		
	}
